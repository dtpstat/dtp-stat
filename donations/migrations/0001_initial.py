# Generated by Django 3.1.14 on 2025-08-07 21:25

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time this object was first created.', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time this object was last updated.', verbose_name='updated at')),
                ('email', models.EmailField(blank=True, help_text='The primary email address of the contact. Must be unique.', max_length=254, null=True, unique=True, verbose_name='email address')),
                ('telegram', models.CharField(blank=True, help_text="The contact's Telegram username.", max_length=100, verbose_name='telegram handle')),
                ('phone', models.CharField(blank=True, help_text="The contact's phone number.", max_length=20, verbose_name='phone number')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Archived', 'Archived'), ('Do Not Contact', 'Do Not Contact')], default='Active', help_text='The current status of the contact.', max_length=50, verbose_name='status')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time this object was first created.', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time this object was last updated.', verbose_name='updated at')),
                ('name', models.CharField(help_text="The unique name of the currency (e.g., 'US Dollar', 'Euro').", max_length=100, unique=True, verbose_name='name')),
                ('code', models.CharField(help_text="The currency code (e.g., 'USD', 'EUR').", max_length=10, unique=True, verbose_name='code')),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time this object was first created.', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time this object was last updated.', verbose_name='updated at')),
                ('target_amount', models.DecimalField(decimal_places=2, help_text='The target amount to be raised for this goal. Must be positive.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='target amount')),
                ('start_date', models.DateField(help_text='The start date of the fundraising period.', verbose_name='start date')),
                ('end_date', models.DateField(help_text='The end date of the fundraising period.', verbose_name='end date')),
            ],
            options={
                'verbose_name': 'Goal',
                'verbose_name_plural': 'Goals',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time this object was first created.', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time this object was last updated.', verbose_name='updated at')),
                ('name', models.CharField(help_text='The unique name of the subscription level.', max_length=100, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, help_text='A description of the benefits for this level.', verbose_name='description')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time this object was first created.', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time this object was last updated.', verbose_name='updated at')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount for each recurring donation. Must be positive.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='amount')),
                ('start_date', models.DateField(help_text='The date the first payment is due or was made.', verbose_name='start date')),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly')], help_text='How often the donation recurs.', max_length=50, verbose_name='frequency')),
                ('subscription_end', models.DateField(blank=True, help_text='The date this subscription is scheduled to end, if any.', null=True, verbose_name='subscription end date')),
                ('source', models.CharField(blank=True, help_text="Notes on where this subscription originated from (e.g., 'Patreon', 'Stripe').", max_length=255, verbose_name='source')),
                ('contact', models.ForeignKey(help_text='The contact who owns this subscription.', on_delete=django.db.models.deletion.PROTECT, related_name='subscriptions', to='donations.contact', verbose_name='contact')),
                ('currency', models.ForeignKey(help_text='The currency of the subscription (e.g., USD, EUR).', on_delete=django.db.models.deletion.PROTECT, to='donations.currency', verbose_name='currency')),
                ('level', models.ForeignKey(blank=True, help_text='The subscription level. Becomes null if the level is deleted.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subscriptions', to='donations.level', verbose_name='level')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time this object was first created.', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time this object was last updated.', verbose_name='updated at')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount donated in its original currency. Must be positive.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='amount')),
                ('amount_in_base_currency', models.DecimalField(blank=True, decimal_places=2, help_text='The donated amount converted to the base currency. Required when the donation is confirmed.', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='amount in base currency')),
                ('donation_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text='When the donation was received.', verbose_name='donation date and time')),
                ('source', models.CharField(blank=True, help_text="Notes on where this donation came from (e.g., 'Bank Transfer', 'Website Form').", max_length=255, verbose_name='source')),
                ('is_confirmed', models.BooleanField(default=False, help_text='Designates whether this donation has been confirmed and processed.', verbose_name='is confirmed')),
                ('contact', models.ForeignKey(blank=True, help_text='The contact who made the donation. Can be empty for anonymous donations.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='donations', to='donations.contact', verbose_name='contact')),
                ('currency', models.ForeignKey(help_text='The currency of the donation (e.g., USD, EUR).', on_delete=django.db.models.deletion.PROTECT, to='donations.currency', verbose_name='currency')),
                ('subscription', models.ForeignKey(blank=True, help_text='The subscription this donation is a part of. Empty for one-off donations.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='donations', to='donations.subscription', verbose_name='subscription')),
            ],
            options={
                'verbose_name': 'Donation',
                'verbose_name_plural': 'Donations',
                'ordering': ['-donation_datetime'],
            },
        ),
        migrations.CreateModel(
            name='CurrencyPriceHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time this object was first created.', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time this object was last updated.', verbose_name='updated at')),
                ('price', models.DecimalField(decimal_places=2, help_text='The price of the currency in the base currency.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='price')),
                ('datetime', models.DateTimeField(help_text='The date and time this price was recorded.', verbose_name='datetime')),
                ('currency', models.ForeignKey(help_text='The currency for which this price is valid.', on_delete=django.db.models.deletion.CASCADE, to='donations.currency', verbose_name='Currency')),
            ],
            options={
                'verbose_name': 'Currency Price History',
                'verbose_name_plural': 'Currency Price Histories',
                'ordering': ['-datetime'],
            },
        ),
    ]
