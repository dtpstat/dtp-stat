# Example file to run your dev server

# copy: 'cp docker-compose.example.yml docker-compose.yml'
# or use 'docker compose -f docker-compose.example.yml up'
# or just run 'make up' (Makefile handles it)

services:
  db:
    image: kartoza/postgis:14-3.3
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_HOST_PORT}:${POSTGRES_INNER_PORT}"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$${POSTGRES_USER}\" -d \"$${POSTGRES_DB}\" -h 127.0.0.1 -p \"$${POSTGRES_INNER_PORT}\""]
      interval: 5s       # Check health every 5 second
      timeout: 2s        # Allow 2 seconds for response
      retries: 10        # Retry 10 times
      start_period: 10s  # Run checks during first 10 seconds
      start_interval: 1s # Check every second during start_period (Docker 25.0+)
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
        - .:/code
    working_dir: /code
    # Старт: миграции + проверка суперпользователя + запуск сервера
    command: >
      sh -c "
      python run_migrations.py &&
      python create_superuser.py &&
      python manage.py runserver 0.0.0.0:5000
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    env_file:
      - .env.example
    restart: unless-stopped
  qcluster:
    build: .
    command: >
      sh -c "
      python run_migrations.py &&
      python manage.py qcluster
      "
    volumes:
      - .:/code
    working_dir: /code
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    env_file:
      - .env.example
    restart: unless-stopped
networks:
  backend:
volumes:
  pgdata: